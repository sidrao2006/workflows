# Requirements:
# - Enable 'write' permission for 'actions' and 'pull-requests'
# permissions:
#   actions: write
#   pull-requests: write
#
# Additional setup: Copy dev/ci to the root of your repository. Refer to https://github.com/actions/labeler#create-githublabeleryml for more details.

name: Pull Request Labeler
on:
  workflow_call:
    inputs:
      revert_label:
        required: false
        type: string
        default: 'revert'
      release_label:
        required: false
        type: string
        default: 'release'

jobs:
  triage:
    name: Add PR labels
    runs-on: ubuntu-latest

    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          sync-labels: true

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add 'revert' label to relevant PRs
        if: contains(github.event.pull_request.title, 'Revert')
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            github.rest.issues.addLabels({
              owner, repo,
              issue_number: context.payload.pull_request.number,
              labels: ['${{ inputs.revert_label }}'],
            });

      - name: Get commits
        uses: octokit/request-action@v2.3.1
        id: get_commits
        with:
          route: GET /repos/{owner}/{repo}/pulls/{pull_number}/commits
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          pull_number: ${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add 'release' label to relevant PRs
        env:
          title: ${{ github.event.pull_request.title }}
          commit_messages: ${{ toJSON(fromJSON(steps.get_commits.outputs.data).*.commit.message) }}
        uses: actions/github-script@v7
        with:
          script: |
            const { title, commit_messages } = process.env
            if (title.includes('Release')
            || JSON.parse(commit_messages).some(message =>/^release.*:.*/.test(message)) ) {
              const { owner, repo } = context.repo;
              github.rest.issues.addLabels({
                owner, repo,
                issue_number: context.payload.pull_request.number,
                labels: ['${{ inputs.release_label }}'],
              });
            }
